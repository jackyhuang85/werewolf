package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"math/rand"
	"time"
	"werewolf/core"
	"werewolf/graph/model"
)

// CreateRoom is the resolver for the createRoom field.
func (r *mutationResolver) CreateRoom(ctx context.Context, input model.NewRoom) (*model.Response, error) {
	storage := core.GetGlobalStorage()

	rand.Seed(time.Now().UnixNano())
	pid := rand.Int()
	player := &model.Player{
		ID:   fmt.Sprintf("%d", pid),
		Name: input.PlayerName,
	}
	playerKey := fmt.Sprintf("p_%d", pid)
	storage[playerKey] = player

	rid := rand.Int()
	room := &model.Room{
		ID:      fmt.Sprintf("%d", rid),
		Host:    player,
		Members: []*model.Player{player},
	}
	roomKey := fmt.Sprintf("r_%d", rid)
	storage[roomKey] = room

	return &model.Response{
		Player: player,
		Room:   room,
	}, nil
}

// JoinRoom is the resolver for the joinRoom field.
func (r *mutationResolver) JoinRoom(ctx context.Context, name string, roomID string) (*model.Response, error) {
	storage := core.GetGlobalStorage()

	roomKey := fmt.Sprintf("r_%d", roomID)
	roomRaw, ok := storage[roomKey]
	if !ok {
		return &model.Response{
			Player: nil,
			Room:   nil,
		}, nil
	}

	rand.Seed(time.Now().UnixNano())
	pid := rand.Int()
	player := &model.Player{
		ID:   fmt.Sprintf("%d", pid),
		Name: name,
	}
	playerKey := fmt.Sprintf("p_%d", pid)
	storage[playerKey] = player

	room := roomRaw.(*model.Room)
	room.Members = append(room.Members, player)
	storage[roomKey] = room

	return &model.Response{
		Player: player,
		Room:   room,
	}, nil
}

// Room is the resolver for the room field.
func (r *queryResolver) Room(ctx context.Context, roomID string) (*model.Room, error) {
	storage := core.GetGlobalStorage()

	roomKey := fmt.Sprintf("r_%s", roomID)
	roomRaw, ok := storage[roomKey]
	if !ok {
		return &model.Room{
			ID:      "",
			Host:    nil,
			Members: nil,
		}, nil
	}

	room := roomRaw.(*model.Room)

	return room, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
